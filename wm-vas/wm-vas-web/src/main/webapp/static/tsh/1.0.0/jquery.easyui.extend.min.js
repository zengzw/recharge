if ($.fn.datagrid){
	$.fn.datagrid.defaults.loadMsg = '正在处理，请稍待。。。';
}
if ($.fn.treegrid && $.fn.datagrid){
	$.fn.treegrid.defaults.loadMsg = $.fn.datagrid.defaults.loadMsg;
}
if ($.messager){
	$.messager.defaults.ok = '确定';
	$.messager.defaults.cancel = '取消';
}
$.map(['validatebox','textbox','filebox','searchbox',
		'combo','combobox','combogrid','combotree',
		'datebox','datetimebox','numberbox',
		'spinner','numberspinner','timespinner','datetimespinner'], function(plugin){
	if ($.fn[plugin]){
		$.fn[plugin].defaults.missingMessage = '该输入项为必输项';
	}
});
if ($.fn.validatebox){
	$.fn.validatebox.defaults.rules.email.message = '请输入有效的电子邮件地址';
	$.fn.validatebox.defaults.rules.url.message = '请输入有效的URL地址';
	$.fn.validatebox.defaults.rules.length.message = '输入内容长度必须介于{0}和{1}之间';
	$.fn.validatebox.defaults.rules.remote.message = '请修正该字段';
}
if ($.fn.calendar){
	$.fn.calendar.defaults.weeks = ['日','一','二','三','四','五','六'];
	$.fn.calendar.defaults.months = ['一月','二月','三月','四月','五月','六月','七月','八月','九月','十月','十一月','十二月'];
}
if ($.fn.datebox){
	$.fn.datebox.defaults.currentText = '今天';
	$.fn.datebox.defaults.closeText = '关闭';
	$.fn.datebox.defaults.okText = '确定';
	$.fn.datebox.defaults.formatter = function(date){
		var y = date.getFullYear();
		var m = date.getMonth()+1;
		var d = date.getDate();
		return y+'-'+(m<10?('0'+m):m)+'-'+(d<10?('0'+d):d);
	};
	$.fn.datebox.defaults.parser = function(s){
		if (!s) return new Date();
		var ss = s.split('-');
		var y = parseInt(ss[0],10);
		var m = parseInt(ss[1],10);
		var d = parseInt(ss[2],10);
		if (!isNaN(y) && !isNaN(m) && !isNaN(d)){
			return new Date(y,m-1,d);
		} else {
			return new Date();
		}
	};
}
if ($.fn.datetimebox && $.fn.datebox){
	$.extend($.fn.datetimebox.defaults,{
		currentText: $.fn.datebox.defaults.currentText,
		closeText: $.fn.datebox.defaults.closeText,
		okText: $.fn.datebox.defaults.okText
	});
}
if ($.fn.datetimespinner){
	$.fn.datetimespinner.defaults.selections = [[0,4],[5,7],[8,10],[11,13],[14,16],[17,19]]
}

$(function(){
  $.extend($.fn.validatebox.defaults.tipOptions, {
    onShow:function(){
      $(this).tooltip("tip").css({color:"#333",borderColor:"#ccc",backgroundColor:"#fff"});
    }
  });
});

$(function(){
//用于查询验证,验证开始时间是否小于结束时间
$.fn.datebox.defaults.formatter = function(date){//对于时间格式的转换
  var y = date.getFullYear();
  var m = fullnum(date.getMonth()+1);
  var d = fullnum(date.getDate());
  return y+'-'+m+'-'+d;
};
function fullnum(obj){//对于月小于10格式的转换,因为Timestamp转换必须是2013-01-04这种格式
  if(Number(obj) < 10){
    return '0' + obj;
  }else{
    return obj;
  } }

  //时间验证
  $.extend($.fn.validatebox.defaults.rules, {//验证开始时间小于结束时间
    endTime: {
      validator: function(value, param){
        startTime2 = $(param[0]).datetimebox('getValue');
        var d1 = $.fn.datebox.defaults.parser(startTime2);
        var d2 = $.fn.datebox.defaults.parser(value);
        var varify=(d2>=d1);
        return varify;
      },
      message: '结束时间要大于开始时间！'
    },
    startTime: {
      validator: function(value, param){
        startTime1 = $(param[0]).datetimebox('getValue');
        var d1 = $.fn.datebox.defaults.parser(startTime1);
        var d2 = $.fn.datebox.defaults.parser(value);
        var varify=(d2<=d1);

        return varify;
      },
      message: '开始时间要小于结束时间！'
    }
  })


  /*form*/

  /*tabs*/
  $.messager.defaults.width=400;
  /*分页*/
  // var layout = ["manual","list","first","prev","links","next","last","refresh"];
  var layout = ["manual","first","prev","links","next","last","refresh"];
  $.fn.pagination.defaults.layout=layout;
  $.fn.pagination.defaults.links=5;
  $.fn.pagination.defaults.beforePageText="";
  $.fn.pagination.defaults.afterPageText="共：{pages}页";
  // displayMsg: "显示{from}到{to},共{total}记录"
  $.fn.pagination.defaults.displayMsg='总记录数：<span class="text-info">{total}</span>';
  //console.log($.fn.linkbutton.methods);
  //console.log($.fn.linkbutton.defaults);
  // $.extend($.fn.linkbutton.defaults, {
  //   class : function(param) {
  //
  //   },
  //
  // });
})



  // 
  // // console.log($(this).textbox('getText'));
  // // 
  // // 
  // // 
  // 
  //this.value=this.

function err(target, message){
       var t = $(target);
       if (t.hasClass('textbox-text')){
           t = t.parent();
       }
			 if(message){
				 message='&nbsp;<i class="i-error"></i>&nbsp;'+message;
			 }else{
					message='&nbsp;<i class="i-success"></i>&nbsp;';
			 }
       if($(target).hasClass('textbox-prompt')){
					 message="";
       }
       var m = t.next('.error-message');
       if (!m.length){
         m = $('<div class="error-message" style="display:inline-block"></div>').insertAfter(t);
       }
       m.html(message);
}
function err2(target, message){
       var t = $(target);
       if (t.hasClass('textbox-text')){
           t = t.parent();
       }

       if($(target).hasClass('textbox-prompt')){
				 if(message){
	         message='&nbsp;<i class="i-error"></i>&nbsp;'+message;
	       }else{
					 message="";
				 }

       }else{
				 if(message){
	         message='&nbsp;<i class="i-error"></i>&nbsp;'+message;
	       }else{
	          message='&nbsp;<i class="i-success"></i>&nbsp;';
	       }
			 }
       var m = t.next('.error-message');
       if (!m.length){
         m = $('<div class="error-message" style="display:inline-block"></div>').insertAfter(t);
       }
       m.html(message);
}


/**
 * 扩展的基本校验规则，
 */




$.extend($.fn.textbox.defaults.events,{
  keyup:function(){
    var op = $(this).validatebox("options");
    if(op.inputLimit){
        var rules = op.inputLimit;
        var value = $(this).val();

        value = $.fn.validatebox.defaults.inputLimitRules[rules](value);
        $(this).val(value);
        
    }
  },
  afterpaste:function(){
    var op = $(this).validatebox("options");
    if(op.inputLimit){
        var rules = op.inputLimit;
        var value = $(this).val();

        value = $.fn.validatebox.defaults.inputLimitRules[rules](value);
        $(this).val(value);
        
    }
  }
})

$.fn.textbox.defaults.inputLimit=false;
$.fn.validatebox.defaults.inputLimitRules={};
$.extend($.fn.validatebox.defaults.inputLimitRules, {
    numonly:function(value){
      value = value.replace(/\D+/g,'');
      return value;
    },
    tel:function(value){
      value = value.replace(/[^\d\-]+/g,"");
      return value;
    }

})


$.extend($.fn.validatebox.defaults.rules, {
		checkSelect:{
			validator : function(value, param) {
					value = $.trim(value); //去空格
					return (value != param[0])&&value;
			},
			message : '{1}'
		},
    minLength : { // 判断最小长度
        validator : function(value, param) {
            value = $.trim(value); //去空格
            return value.length >= param[0];
        },
        message : '最少输入 {0} 个字符。'
    },
    length:{validator:function(value,param){
        var len=$.trim(value).length;
            return len>=param[0]&&len<=param[1];
        },
            message:"长度必须在{0}~{1}之间。"
        },
    tel : {// 验证电话号码
        validator : function(value) {
            return /^((\(\d{2,3}\))|(\d{3}\-))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,7}(\-\d{1,4})?$/i.test(value);
        },
        message : '格式不正确,请使用下面格式:020-88888888'
    },
    mobile : {// 验证手机号码
        validator : function(value) {
            return /^(1)\d{10}$/i.test(value);
        },
        message : '手机号码格式不正确'
    },
    idcard : {// 验证身份证
        validator : function(value) {
            return /^\d{15}(\d{2}[A-Za-z0-9])?$/i.test(value);
        },
        message : '身份证号码格式不正确'
    },
    intOrFloat : {// 验证整数或小数
        validator : function(value) {
            return /^\d+(\.\d+)?$/i.test(value);
        },
        message : '请输入数字，并确保格式正确'
    },
    currency : {// 验证货币
        validator : function(value) {
            return /^\d+(\.\d+)?$/i.test(value);
        },
        message : '货币格式不正确'
    },
    //国内邮编验证
    zipcode:{
        validator: function(value) {
            var reg = /^[1-9]\d{5}$/;
            return reg.test(value);
        },
        message:"邮编必须长短0开端的6位数字."
    },
    qq : {// 验证QQ,从10000开始
        validator : function(value) {
            return /^[1-9]\d{4,9}$/i.test(value);
        },
        message : 'QQ号码格式不正确'
    },
    integer : {// 验证整数
        validator : function(value) {
            return /^[+]?[1-9]+\d*$/i.test(value);
        },
        message : '请输入整数'
    },
    chinese : {// 验证中文
        validator : function(value) {
            return /^[\u0391-\uFFE5]+$/i.test(value);
        },
        message : '请输入中文'
    },
    english : {// 验证英语
        validator : function(value) {
            return /^[A-Za-z]+$/i.test(value);
        },
        message : '请输入英文'
    },
    unnormal : {// 验证是否包含空格和非法字符
        validator : function(value) {
            return /.+/i.test(value);
        },
        message : '输入值不能为空和包含其他非法字符'
    },
    username : {// 验证用户名
        validator : function(value) {
            return /^[a-zA-Z][a-zA-Z0-9_]{5,15}$/i.test(value);
        },
        message : '用户名不合法（字母开头，允许6-16字节，允许字母数字下划线）'
    },
    faxno : {// 验证传真
        validator : function(value) {
//            return /^[+]{0,1}(\d){1,3}[ ]?([-]?((\d)|[ ]){1,12})+$/i.test(value);
            return /^((\(\d{2,3}\))|(\d{3}\-))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,7}(\-\d{1,4})?$/i.test(value);
        },
        message : '传真号码不正确'
    },
    zip : {// 验证邮政编码
        validator : function(value) {
            return /^[1-9]\d{5}$/i.test(value);
        },
        message : '邮政编码格式不正确'
    },
    ip : {// 验证IP地址
        validator : function(value) {
            return /d+.d+.d+.d+/i.test(value);
        },
        message : 'IP地址格式不正确'
    },
    name : {// 验证姓名，可以是中文或英文
            validator : function(value) {
                return /^[\u0391-\uFFE5]+$/i.test(value)|/^\w+[\w\s]+\w+$/i.test(value);
            },
            message : '请输入姓名'
    },
    email:{
        validator : function(value){
        return /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(value);
    },
    message : '请输入有效的电子邮件账号(例：abc@126.com)'
    },

    equalTo:{
        validator : function(value, param){
              return $(param[0]).val() == value;
        },
        message : '两次输入的密码不一致！'
    },
    warnmintime : { // 判断告警的值只能一级一级的增加，最小值
        validator : function(value, param) {
            value = $.trim(value); //去空格
            if( value !="")
            for(var i=0;i<param.length; i++){
                $(param[i]).val();
                if($(param[i]).combobox('getValue')){
                    var temp=$.trim($(param[i]).combobox('getValue'));
                    if(temp !="" && !isNaN(temp) && parseInt(value) <= parseInt(temp))
                        return false;
                   }
            }
            return true;
        },
        message : '不能小于当前告警的前一级的告警时间'
    },
    warnmaxtime : { // 判断告警的值只能一级一级的增加，最大值
        validator : function(value, param) {
            value = $.trim(value); //去空格
            if( value !="")
            for(var i=0;i<param.length; i++){
                $(param[i]).val();
                if($(param[i]).combobox('getValue')){
                    var temp=$.trim($(param[i]).combobox('getValue'));
                    if(temp !="" && !isNaN(temp) && parseInt(value) >= parseInt(temp))
                        return false;
                   }
            }
            return true;
        },
        message : '不能大于当前告警的后一级的告警时间'
    },
		/// <summary>
    /// 银行卡号验证
    /// @returns boolean
    /// </summary>
    isBankCardNo:{
			  validator : function(bankno) {
					var lastNum = bankno.substr(bankno.length - 1, 1);//取出最后一位（与luhm进行比较）
	        var first15Num = bankno.substr(0, bankno.length - 1);//前15或18位
	        var newArr = new Array();
	        for (var i = first15Num.length - 1; i > -1; i--) {    //前15或18位倒序存进数组
	            newArr.push(first15Num.substr(i, 1));
	        }
	        var arrJiShu = new Array();  //奇数位*2的积 <9
	        var arrJiShu2 = new Array(); //奇数位*2的积 >9

	        var arrOuShu = new Array();  //偶数位数组
	        for (var j = 0; j < newArr.length; j++) {
	            if ((j + 1) % 2 == 1) {//奇数位
	                if (parseInt(newArr[j]) * 2 < 9)
	                    arrJiShu.push(parseInt(newArr[j]) * 2);
	                else
	                    arrJiShu2.push(parseInt(newArr[j]) * 2);
	            }
	            else //偶数位
	                arrOuShu.push(newArr[j]);
	        }

	        var jishu_child1 = new Array();//奇数位*2 >9 的分割之后的数组个位数
	        var jishu_child2 = new Array();//奇数位*2 >9 的分割之后的数组十位数
	        for (var h = 0; h < arrJiShu2.length; h++) {
	            jishu_child1.push(parseInt(arrJiShu2[h]) % 10);
	            jishu_child2.push(parseInt(arrJiShu2[h]) / 10);
	        }

	        var sumJiShu = 0; //奇数位*2 < 9 的数组之和
	        var sumOuShu = 0; //偶数位数组之和
	        var sumJiShuChild1 = 0; //奇数位*2 >9 的分割之后的数组个位数之和
	        var sumJiShuChild2 = 0; //奇数位*2 >9 的分割之后的数组十位数之和
	        var sumTotal = 0;
	        for (var m = 0; m < arrJiShu.length; m++) {
	            sumJiShu = sumJiShu + parseInt(arrJiShu[m]);
	        }

	        for (var n = 0; n < arrOuShu.length; n++) {
	            sumOuShu = sumOuShu + parseInt(arrOuShu[n]);
	        }

	        for (var p = 0; p < jishu_child1.length; p++) {
	            sumJiShuChild1 = sumJiShuChild1 + parseInt(jishu_child1[p]);
	            sumJiShuChild2 = sumJiShuChild2 + parseInt(jishu_child2[p]);
	        }
	        //计算总和
	        sumTotal = parseInt(sumJiShu) + parseInt(sumOuShu) + parseInt(sumJiShuChild1) + parseInt(sumJiShuChild2);

	        //计算Luhm值
	        var k = parseInt(sumTotal) % 10 == 0 ? 10 : parseInt(sumTotal) % 10;
	        var luhm = 10 - k;

	        if (lastNum == luhm) {
	            //$("#banknoInfo").html("Luhm验证通过");
	            return true;
	        }
	        else {
	            //$("#banknoInfo").html("银行卡号必须符合Luhm校验");
	            return false;
	        }
	    },message : '请输入正确的银行卡号'
		},

    // / <summary>
    // / 数据库重复验证
    // / </summary>
    isRegister: {
			validator : function (value,param) {
        var bdata = true;
        $.ajax({
            type: "POST",
            url: param[0]+"?"+param[1]+"="+value,
            async:false,
						cache:false,
            dataType: "json",
            success: function (data) {
                bdata = data;
            }
        });
        return bdata;
    },	message : '{2}'
	}
});


//得到url地址，拿出指定参数的值
function acceptParam(paras){
  var url = location.href;
  var paraString = url.substring(url.indexOf("?")+1,url.length).split("&");
  var paraObj = {}
  for (i=0; j=paraString[i]; i++){
    paraObj[j.substring(0,j.indexOf("=")).toLowerCase()] = j.substring(j.indexOf("=")+1,j.length);
  }
  var returnValue = paraObj[paras.toLowerCase()];
  if(typeof(returnValue)=="undefined"){
    return "";
  }else{
    return returnValue;
  }
}

/**
 *将豪秒转抱成指定的格式 
 *@millisecond: 豪秒
 *@format：格式化字符
 *  用法示意：dateFormat(1433232328000,"yyyy-MM-dd HH:mm:ss") 
 */
function dateFormat(millisecond, format){
      var t = new Date(millisecond);
      var tf = function(i){return (i < 10 ? '0' : '') + i;};
  return format.replace(/yyyy|MM|dd|HH|mm|ss/g, function(a){
      switch(a){
          case 'yyyy':
              return tf(t.getFullYear());
              break;
          case 'MM':
              return tf(t.getMonth() + 1);
              break;
          case 'mm':
              return tf(t.getMinutes());
              break;
          case 'dd':
              return tf(t.getDate());
              break;
          case 'HH':
              return tf(t.getHours());
              break;
          case 'ss':
                return tf(t.getSeconds());
            break;
          }
      });
  };
  /** 
   * 使用方法: 
   * 开启:MaskUtil.mask(); 
   * 关闭:MaskUtil.unmask(); 
   *  
   * MaskUtil.mask('其它提示文字...'); 
   */
  var MaskUtil = (function () {

      var $mask, $maskMsg;

      var defMsg = '正在处理，请稍待。。。';

      function init() {
          if (!$mask) {
              $mask = $("<div class=\"datagrid-mask mymask\"></div>").appendTo("body");
          }
          if (!$maskMsg) {
              $maskMsg = $("<div class=\"datagrid-mask-msg mymask\">" + defMsg + "</div>")
                  .appendTo("body").css({ 'font-size': '12px' });
          }

          $mask.css({ width: "100%", height: $(document).height() });

          $maskMsg.css({
              left: ($(document.body).outerWidth(true) - 190) / 2, top: ($(window).height() - 45) / 2
          });

      }

      return {
          mask: function (msg) {
              if (msg) {
                  defMsg = msg;
              }
              init();
              $mask.show();
              $maskMsg.html(msg || defMsg).show();
          }
          , unmask: function () {
              $mask.hide();
              $maskMsg.hide();
          }
      }
  })